!function(){class e{constructor(){this.calculators={},this.init()}init(){this.loadCalculatorData(),this.bindEvents()}async loadCalculatorData(){try{const[e,t,a]=await Promise.all([fetch("../assets/js/data/car-insurance.json").then(e=>e.json()),fetch("../assets/js/data/health-insurance.json").then(e=>e.json()),fetch("../assets/js/data/life-insurance.json").then(e=>e.json())]);this.calculators={car:e,health:t,life:a}}catch(e){console.error("계산기 데이터 로드 실패:",e)}}bindEvents(){document.querySelectorAll(".calculator-form").forEach(e=>{e.addEventListener("submit",t=>{t.preventDefault(),this.calculatePremium(e)})}),document.querySelectorAll(".calculator-input").forEach(e=>{e.addEventListener("input",e=>{this.updateCalculation(e.target.closest(".calculator-form"))})})}calculatePremium(e){const t=e.dataset.type,a=this.calculators[t];if(!a)return void this.showError("계산기 데이터를 불러올 수 없습니다.");const r=new FormData(e),c=Object.fromEntries(r.entries());let s=0;switch(t){case"car":s=this.calculateCarPremium(c,a);break;case"health":s=this.calculateHealthPremium(c,a);break;case"life":s=this.calculateLifePremium(c,a)}this.displayResult(e,s,[])}calculateCarPremium(e,t){const{age:a,drivingExperience:r,carType:c,coverage:s,claims:n}=e,o=5e5*this.getAgeFactor(parseInt(a),t.calculators.premium.factors.age)*this.getExperienceFactor(parseInt(r))*this.getCarTypeFactor(c)*this.getCoverageFactor(parseInt(s),t.calculators.premium.factors.coverage)*this.getClaimsFactor(parseInt(n));return Math.round(o)}calculateHealthPremium(e,t){const{age:a,gender:r,health:c,coverage:s,familyHistory:n}=e,o=3e5*this.getAgeFactor(parseInt(a),t.calculators.premium.factors.age)*("female"===r?.9:1)*this.getHealthFactor(c,t.calculators.premium.factors.health)*this.getCoverageFactor(parseInt(s),t.calculators.premium.factors.coverage)*("yes"===n?1.2:1);return Math.round(o)}calculateLifePremium(e,t){const{age:a,gender:r,health:c,coverage:s,occupation:n}=e,o=4e5*this.getAgeFactor(parseInt(a),t.calculators.premium.factors.age)*("female"===r?.8:1)*this.getHealthFactor(c,t.calculators.premium.factors.health)*this.getCoverageFactor(parseInt(s),t.calculators.premium.factors.coverage)*this.getOccupationFactor(n);return Math.round(o)}getAgeFactor(e,t){return e<=30?t["18-30"]||1:e<=40?t["31-40"]||1.2:e<=50?t["41-50"]||1.5:e<=60?t["51-60"]||2:t["61-65"]||2.5}getExperienceFactor(e){return e>=10?.7:e>=5?.8:e>=2?.9:1}getCarTypeFactor(e){return{small:.8,medium:1,large:1.3,suv:1.2,luxury:1.5}[e]||1}getCoverageFactor(e,t){return e<=1e7?t[1e7]||1:e<=2e7?t[2e7]||1.8:e<=3e7?t[3e7]||2.5:e<=5e7?t[5e7]||3.5:t[1e8]||6}getClaimsFactor(e){return 0===e?.8:1===e?1:2===e?1.3:1.6}getHealthFactor(e,t){return t[e]||1}getOccupationFactor(e){return{office:1,manual:1.2,professional:.9,student:.8,retired:1.1}[e]||1}updateCalculation(e){const t=e.querySelectorAll("input, select");Array.from(t).every(e=>e.value)&&this.calculatePremium(e)}displayResult(e,t,a){const r=e.querySelector(".calculator-result");if(!r)return;const c=Math.round(t/12),s=t;r.innerHTML=`\n      <div class="result-card">\n        <h3>예상 보험료</h3>\n        <div class="premium-display">\n          <div class="premium-item">\n            <span class="label">월 보험료</span>\n            <span class="amount">${this.formatCurrency(c)}</span>\n          </div>\n          <div class="premium-item">\n            <span class="label">연 보험료</span>\n            <span class="amount">${this.formatCurrency(s)}</span>\n          </div>\n        </div>\n        <div class="result-note">\n          <p>* 실제 보험료는 정확한 심사 후 결정됩니다.</p>\n          <p>* 위 금액은 참고용이며, 실제 가입 시에는 상담을 통해 정확한 견적을 받으시기 바랍니다.</p>\n        </div>\n        <button type="button" class="btn btn-primary" onclick="window.location.href='consultation.html'">\n          상담 신청하기\n        </button>\n      </div>\n    `,r.style.display="block"}formatCurrency(e){return new Intl.NumberFormat("ko-KR",{style:"currency",currency:"KRW"}).format(e)}showError(e){const t=document.createElement("div");t.className="error-message",t.textContent=e,document.body.appendChild(t),setTimeout(()=>{t.remove()},3e3)}}document.addEventListener("DOMContentLoaded",()=>{new e})}();